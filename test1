import cv2
import numpy as np
import matplotlib.pyplot as plt

image_path = r"C:\Users\choi-youngchan\Desktop\HTK_CYC\python\src_img\hist_stretch\percentage_lot\C_Image_0007.tif"
image = cv2.imread(image_path, 0)

hist = cv2.calcHist([image], [0], None, [256], [0, 256])
accumulator = np.cumsum(hist)

clip_hist_percent = 1
maximum = accumulator[-1]
clip_hist_percent *= (maximum / 100.0) / 2.0

minimum_gray = np.searchsorted(accumulator, clip_hist_percent)
maximum_gray = np.searchsorted(accumulator, maximum - clip_hist_percent, side='right')

alpha = 255 / (maximum_gray - minimum_gray)
beta = -minimum_gray * alpha

stretched_image = cv2.convertScaleAbs(image, alpha=alpha, beta=beta)

target_brightness = 127
gamma = np.log10(target_brightness / 255.0) / np.log10(np.mean(stretched_image) / 255.0)
gamma_corrected = np.clip(gamma, 0.1, 5.0)

gamma_table = np.array([((i / 255.0) ** gamma_corrected) * 255 for i in range(256)], dtype=np.uint8)
gamma_corrected_image = cv2.LUT(stretched_image, gamma_table)

cv2.imwrite(image_path[:-4] + "_1_result.jpg", gamma_corrected_image)

print(
    round(np.mean(image), 2), round(np.std(image), 2),
    round(np.mean(stretched_image), 2), round(np.std(stretched_image), 2),
    round(np.mean(gamma_corrected_image), 2), round(np.std(gamma_corrected_image), 2)
)

hist_image = cv2.calcHist([image], [0], None, [256], [0, 256]).flatten()
hist_stretched_image = cv2.calcHist([stretched_image], [0], None, [256], [0, 256]).flatten()
hist_gamma_corrected_image = cv2.calcHist([gamma_corrected_image], [0], None, [256], [0, 256]).flatten()

hists = {
    'image': hist_image,
    'stretched': hist_stretched_image,
    'gamma': hist_gamma_corrected_image
}

for l, (k, v) in enumerate(hists.items()):
    plt.subplot(1, 3, l + 1)
    plt.title(k)
    plt.plot(v)
    plt.xlim([0, 255])
plt.tight_layout()
plt.savefig(image_path[:-4] + "_plot.png")
plt.show()
plt.clf()








# # CLAHE

# import cv2
# import numpy as np
# import matplotlib.pyplot as plt

# li = [r"C:\Users\choi-youngchan\Desktop\HTK_CYC\python\src_img\hist_stretch\clahe_cliplimit_test 1 60\11C_Image_0001.tif",
#       r"C:\Users\choi-youngchan\Desktop\HTK_CYC\python\src_img\hist_stretch\clahe_cliplimit_test 1 60\21C_Image_0002.tif",
#       r"C:\Users\choi-youngchan\Desktop\HTK_CYC\python\src_img\hist_stretch\clahe_cliplimit_test 1 60\31C_Image_0005.tif",
#       r"C:\Users\choi-youngchan\Desktop\HTK_CYC\python\src_img\hist_stretch\clahe_cliplimit_test 1 60\41C_Image_0011.tif",
#       r"C:\Users\choi-youngchan\Desktop\HTK_CYC\python\src_img\hist_stretch\clahe_cliplimit_test 1 60\51C_Image_0013.tif"]
# for f in li:
#     for i in range(1, 61):
#         path = f
#         img = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
#         # cl = round(i*0.1, 1)
#         cl = i
#         clahe = cv2.createCLAHE(clipLimit=cl, tileGridSize=(8, 8))
#         cl1 = clahe.apply(img)
#         cv2.imwrite(path[:-4] + "_clahe_result_" + str(cl) + ".jpg", cl1)

#         img_b = np.mean(img)
#         img_c = np.std(img)
#         cl1_b = np.mean(cl1)
#         cl1_c = np.std(cl1)
#         print(f"{cl} img : {img_b}, {img_c} / {cl} cl : {cl1_b}, {cl1_c}")

#         hist_img = cv2.calcHist([img], [0], None, [256], [0, 256]).flatten()
#         hist_cl1 = cv2.calcHist([cl1], [0], None, [256], [0, 256]).flatten()

#         hists = {'Before': hist_img, 'CLAHE': hist_cl1}
#         for l, (k, v) in enumerate(hists.items()):
#             plt.subplot(1, 2, l + 1)
#             plt.title(k)
#             plt.plot(v[0:])
#             plt.xlim([0, 255])
#             plt.ylim([0, 50000])
#         plt.tight_layout()
#         plt.savefig(path[:-4] + "_plot_" + str(cl) + ".png")
#         # plt.show()
#         plt.clf()








# # SRD
# import cv2
# import numpy as np
# import matplotlib.pyplot as plt

# path = r"C:\Users\choi-youngchan\Desktop\HTK_CYC\python\src_img\hist_stretch\2s\C_Image_0002.tif"

# img = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
# # cv2.imwrite(path[:-4] + "_img.tif", img)
# # print(np.size(img))

# img_norm = cv2.normalize(img, None, 0, 255, cv2.NORM_MINMAX)
# cv2.imwrite(path[:-4] + "_img_norm.tif", img_norm)
# print(np.size(img_norm))

# current_brightness = np.mean(img_norm)
# brightness_factor = 127 / current_brightness
# img_adj = np.clip(img_norm * brightness_factor, 0, 255).astype(np.uint8)
# cv2.imwrite(path[:-4] + "_img_adj.tif", img_adj)
# print(np.size(img_adj))

# hist = cv2.calcHist([img], [0], None, [256], [0, 256]).flatten()
# hist_norm = cv2.calcHist([img_norm], [0], None, [256], [0, 256]).flatten()
# hist_adj = cv2.calcHist([img_adj], [0], None, [256], [0, 256]).flatten()

# hist_tot = np.sum(hist)
# hist_norm_tot = np.sum(hist_norm)
# hist_adj_tot = np.sum(hist_adj)

# print(f"hist_tot: {hist_tot}, hist_norm_tot: {hist_norm_tot}, hist_adj_tot: {hist_adj_tot}")

# hists = {'Before': hist, 'Manual': hist_norm, 'adj': hist_adj}
# for i, (k, v) in enumerate(hists.items()):
#     plt.subplot(1, 3, i + 1)
#     plt.title(k)
#     plt.plot(v)
#     plt.xlim([0, 255])
# plt.tight_layout()
# plt.savefig(path[:-4] + "_plot.png")
# # plt.show()
# plt.clf()










# # SRD test  --> pixel에 loss 발생
# import cv2
# import numpy as np
# import matplotlib.pyplot as plt

# path = r"C:\Users\choi-youngchan\Desktop\HTK_CYC\python\src_img\hist_stretch\SRD\test\No4_3nm_0001_UD.tif"

# img = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
# cv2.imwrite(path[:-4] + "_img.tif", img)

# # img_norm = cv2.normalize(img, None, 0, 255, cv2.NORM_MINMAX)
# lower_bound = np.percentile(img, 1)
# upper_bound = np.percentile(img, 99)
# mask = cv2.UMat(np.where((img >= lower_bound) & (img <= upper_bound), 255, 0).astype(np.uint8))
# img_norm = cv2.normalize(img, None, 0, 255, cv2.NORM_MINMAX, dtype=cv2.CV_8U, mask=mask)

# cv2.imwrite(path[:-4] + "_img_norm.tif", img_norm)

# current_brightness = np.mean(img_norm)
# brightness_factor = 127 / current_brightness
# img_adj = np.clip(img_norm * brightness_factor, 0, 255).astype(np.uint8)
# cv2.imwrite(path[:-4] + "_img_adj.tif", img_adj)

# hist = cv2.calcHist([img], [0], None, [256], [0, 256]).flatten()
# hist_norm = cv2.calcHist([img_norm], [0], None, [256], [0, 256]).flatten()
# hist_adj = cv2.calcHist([img_adj], [0], None, [256], [0, 256]).flatten()

# hist_tot = np.sum(hist)
# hist_norm_tot = np.sum(hist_norm)
# hist_adj_tot = np.sum(hist_adj)
# print(f"hist_tot: {hist_tot}, hist_norm_tot: {hist_norm_tot}, hist_adj_tot: {hist_adj_tot}")

# hists = {'Before': hist, 'Manual': hist_norm, 'adj': hist_adj}
# for i, (k, v) in enumerate(hists.items()):
#     plt.subplot(1, 3, i + 1)
#     plt.title(k)
#     plt.plot(v)
#     plt.xlim([0, 255])
# plt.tight_layout()
# plt.savefig(path[:-4] + "_plot.png")
# plt.show()
# plt.clf()
